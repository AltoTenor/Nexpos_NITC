alias userSP R1;
alias processTableBase R3;
processTableBase = PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5 * CORE +1] * 16);

//Work
//UPTR set to Stack Ptr
[processTableBase + 13] = SP;

//UA Page No.
SP = [processTableBase + 11] * 512 - 1;
PTBR = [processTableBase + 14];
userSP = [processTableBase + 13];
[processTableBase + 9] = 21;

//temp:  imp : R3,R1


if ( [processTableBase+1] != 2 || [processTableBase + 3] != 1 )then
    //Return -1
    [([PTBR + 2 * ((userSP - 1)/ 512)] * 512) + (userSP - 1) % 512] = -1;

    // Reset Mode Flag
    [processTableBase + 9] = 0;

    //Reset User Stack
    SP = [processTableBase + 13];
    ireturn;
endif;

//Turn of core 2
multipush(R3,R2,R1);

R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;

// Acquire Scheduler
R1 = ACQUIRE_SCHED_LOCK;
call ACCESS_CONTROL;
multipop(R3,R2,R1);

reset;


multipush(R3,R2,R1);
R1 = RELEASE_LOCK;
R2 = SCHED_LOCK;
call ACCESS_CONTROL;


R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;


//Calling Kill All
R1 = KILL_ALL;
R2 = [SYSTEM_STATUS_TABLE + 5 * CORE +1];
call PROCESS_MANAGER;

//Inode + User Table
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 5 * CORE +1];
R3 = 59;
R4 = 3;
call DEVICE_MANAGER;

print "eh";

R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 5 * CORE +1];
R3 = 60;
R4 = 4;
call DEVICE_MANAGER;



//Root File
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 5 * CORE +1];
R3 = 62;
R4 = 5;
call DEVICE_MANAGER;


//Disk Free List
R1 = 1;
R2 = [SYSTEM_STATUS_TABLE + 5 * CORE +1];
R3 = 61;
R4 = 2;

call DEVICE_MANAGER;

//Calling Kill All
R1 = 5;
R2 = [SYSTEM_STATUS_TABLE + 5 * CORE +1];
call PROCESS_MANAGER;

multipop(R3,R2,R1);




//Writing Back Buffers

alias index R5 ;
index = 0;



//Check
while( index < MAX_BUFFER )do
    //IF buffer exists and dirty bit set
    if ( [BUFFER_TABLE + 4*index ]!= -1 && [BUFFER_TABLE + 4*index + 1] == 1)then
        multipush(R5,R3,R1);
        R1 = 1;
        R2 = [SYSTEM_STATUS_TABLE + 5 * CORE +1];
        R3 = BUFFER_BASE + index;           //Page No
        R4 = [BUFFER_TABLE + 4*index];      //Block No
        call DEVICE_MANAGER;
        multipop(R5,R3,R1);
    endif;
    index = index + 1;
endwhile;


// breakpoint;
halt;